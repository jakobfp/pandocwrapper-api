swagger: "2.0"
info:
  description: Description of the possible HTTP-Requests. Documentation of pandocwrapper can be found here https://jakobfp.github.io/pandocwrapper/.
  version: "1.0.0"
  title: Rest-API for minimal pandocwrapper
consumes:
  - "application/json"
produces:
  - "application/json"
  - "application/pdf"

basePath: "/api"

paths:
  /convert:
    get:
      operationId: converter.convert
      summary: Converts given .tex/.docx/.odt - file into pdf.
      description: Requires a file and the design it should be converted to. For .tex files the path an optional biblography file can be passed.
      parameters:
      - name: file
        in: query
        type: string
        description: Path to the file
        required: true
      - name: design
        in: query
        type: string
        description: Design the file should be converted to.
        required: true
      - name: bib_file
        in: query
        type: string
        description: Bibliography file, if given.
        required: false
      produces:
      - application/json
      responses:
        200:
          description: JSON-Object with properties, indicating if file was successfully converted and where to download it or an error message if a problem occured.
          schema:
            type: object
            required: ["success"]
            properties:
              success:
                type: boolean
                description: Indicates if opertaion was successful executed. True or False.
                example: true
              file_path:
                type: string
                description: Relative path to the converted file on server.
                example: "uploads/f172945953b5d78ad4e179265ff3c722fd9e55519743d0a7f06c524c/example-output.pdf"
              file_name:
                type: string
                description: Name of the converted file.
                example: "example-output.pdf"
              error:
                type: string
                description: Error message.
                example: ""
  /upload:
    post:
      operationId: converter.upload
      summary: Uploads a file.
      consumes:
        - multipart/form-data  # and/or application/x-www-form-urlencoded
      parameters:
        - name: file
          in: formData
          description: The uploaded file data.
          required: true
          type: file
        - name: path
          in: formData
          description: Where to save the file
          required: false
          type: string
      produces:
        - application/json
      responses:
        200:
          description: JSON-Object with properties, indicating if file successfully was uploaded and where or an error message if a problem occured.
          schema:
            type: object
            required: ["success"]
            properties:
              success:
                type: boolean
                description: Indicates if opertaion was successful executed. True or False.
                example: true
              file_path:
                type: string
                description: Relative path to the uploaded file on server.
                example: "uploads/f172945953b5d78ad4e179265ff3c722fd9e55519743d0a7f06c524c/example.tex"
              file_type:
                type: string
                description: Type of the uploaded file.
                example: "tex"
              error:
                type: string
                description: Error message.
                example: ""
  /download:
    get:
      operationId: const.download
      summary: Downloads specific file.
      parameters:
        - name: file
          in: query
          description: Path of the file to download.
          required: true
          type: string
      produces:
        - application/pdf
        - application/json
      responses:
        '200':
          description: The converted PDF file
          schema:
            type: file
        '404':
          description: File was not found.
          schema:
            type: object
  /markdown:
    post:
      operationId: markdown_presentation.create
      summary: Uploads a file.
      consumes:
        - application/json  # and/or application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
      - in: body
        name: parameters
        description: The slides, title slides and regular slides together plus boolean value to indicate if an outline slide and/or and thank-you slide should be created.
        schema:
          type: object
          required:
          - slides
          - titleSlides
          - outline
          - ty
          properties:
            slides:
              type: array
            titleSlides:
              type: array
            outline:
              type: boolean
            ty:
              type: boolean
      responses:
        200:
          description: JSON-Object with properties, indicating if markdown file was successfully created and where it is saved or an error message if a problem occured.
          schema:
            type: object
            required: ["success"]
            properties:
              success:
                type: boolean
                description: Indicates if opertaion was successful executed. True or False.
                example: true
              file_path:
                type: string
                description: Relative path to the created markdown file on server.
                example: "uploads/f172945953b5d78ad4e179265ff3c722fd9e55519743d0a7f06c524c/example.md"
              error:
                type: string
                description: Error message.
                example: ""
